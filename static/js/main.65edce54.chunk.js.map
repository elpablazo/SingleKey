{"version":3,"sources":["components/Header.jsx","components/Login.jsx","components/Password.jsx","components/Description.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","setfase","onClick","e","preventDefault","className","Login","setcredenciales","credenciales","username","password","useState","error","seterror","camposVacios","trim","guardarCredenciales","target","name","value","console","log","onSubmit","type","placeholder","onChange","id","WebPage","setwebsite","website","readOnly","copyText","document","getElementById","select","setSelectionRange","execCommand","Description","App","menuAMostrar","fase","Password","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uSAoBeA,G,WAjBA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAMhB,OACE,4BAAQC,QANiB,SAACC,GAC1BA,EAAEC,iBACFH,EAAQ,KAKN,yBAAKI,UAAU,QACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,cAAb,U,cCyDKC,G,KAnED,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,aAAcP,EAAc,EAAdA,QAEtCQ,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAF0C,EAKlCC,oBAAS,GALyB,mBAKrDC,EALqD,KAK9CC,EAL8C,KAOtDC,EAAe,WACnB,MAAwB,KAApBL,EAASM,QAAqC,KAApBL,EAASK,QAwBnCC,EAAsB,SAACb,GAC3BI,EAAgB,2BACXC,GADU,kBAEZL,EAAEc,OAAOC,KAAOf,EAAEc,OAAOE,SAE5BC,QAAQC,IAAIb,IAId,OACE,0BAAMH,UAAU,QAAQiB,SA1BC,SAACnB,GAE1BA,EAAEC,iBAGEU,IACFD,GAAS,IAIXA,GAAS,GAETZ,EAAQ,MAeLW,EACC,yBAAKP,UAAU,YAAf,qCACE,KACJ,2BACEkB,KAAK,OACLL,KAAK,WACLM,YAAY,UACZL,MAAOV,EACPgB,SAAUT,EACVU,GAAG,OAEL,2BACEH,KAAK,WACLL,KAAK,WACLM,YAAY,gBACZL,MAAOT,EACPe,SAAUT,EACVU,GAAG,OAEJZ,IAAiB,KAAO,6CCjChBa,EA7BC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAc7B,OACE,yBAAKxB,UAAU,SACb,2BACEkB,KAAK,OACLL,KAAK,UACLC,MAAOU,EACPL,YAAY,mBACZC,SAnBiB,SAACtB,GACtByB,EAAWzB,EAAEc,OAAOE,UAoBlB,2BAAOI,KAAK,OAAOG,GAAG,OAAOP,MAAOU,EAASC,UAAQ,IACrD,4BAAQ5B,QAhBO,WACjB,IAAI6B,EAAWC,SAASC,eAAe,QACvCF,EAASG,SACTH,EAASI,kBAAkB,EAAG,OAC9BH,SAASI,YAAY,UAYnB,YCfSC,G,MATK,WAClB,OACE,yBAAKhC,UAAU,eACb,sFACA,yBAAKA,UAAU,gBC2CNiC,MA1Cf,WAAe,IAkBTC,EAlBS,EAMW5B,mBAAS,GANpB,mBAMN6B,EANM,KAMAvC,EANA,OAS2BU,mBAAS,CAC/CF,SAAU,GACVC,SAAU,KAXC,mBASNF,EATM,KASQD,EATR,OAeiBI,mBAAS,IAf1B,mBAeNkB,EAfM,KAeGD,EAfH,KAkCb,OAdEW,EADW,IAATC,EACa,kBAAC,EAAD,MACG,IAATA,EAEP,kBAAC,EAAD,CACEjC,gBAAiBA,EACjBC,aAAcA,EACdP,QAASA,IAIE,kBAACwC,EAAD,CAAUb,WAAYA,EAAYC,QAASA,IAK1D,kBAAC,WAAD,CAAU5B,QAASA,GACjB,kBAAC,EAAD,CAAQA,QAASA,IAChBsC,ICjCaG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLQ,QAAQR,MAAMA,EAAM6C,c","file":"static/js/main.65edce54.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.scss\";\r\n\r\nconst Header = ({ setfase }) => {\r\n  const reiniciarFasesMenu = (e) => {\r\n    e.preventDefault();\r\n    setfase(2);\r\n  };\r\n\r\n  return (\r\n    <header onClick={reiniciarFasesMenu}>\r\n      <div className=\"logo\">\r\n        <div className=\"gradient-box\">\r\n          <p className=\"logoletter\">K</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Login.scss\";\r\n\r\nconst Login = ({ setcredenciales, credenciales, setfase }) => {\r\n  // Destructuring para usar el nombre y credenciales\r\n  const { username, password } = credenciales;\r\n\r\n  // UseState para saber si se han llenado los campos\r\n  const [error, seterror] = useState(false);\r\n  // Esta función permite saber si los campos están vacíos, y de estarlo, devuelve true\r\n  const camposVacios = () => {\r\n    if (username.trim() === \"\" || password.trim() === \"\") {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Esta función envía las credenciales para el usestate, por lo que debe validarlos antes\r\n  const enviarCredenciales = (e) => {\r\n    // Evita que se envíen datos como post\r\n    e.preventDefault();\r\n    // Verificamos que los campos no estén vacíos\r\n    // De haber un campo vacío, hacemos que aparezca un mensjae de error mediante el usestate seterror y retornamos la función\r\n    if (camposVacios()) {\r\n      seterror(true);\r\n      return;\r\n    }\r\n    // Una vez que no haya ningún error, el mensaje pasa a ser false\r\n    seterror(false);\r\n    // Le damos señal al useState 'loggeado' de que el usuario ha sido loggeado para que pueda mostrarse el form de sitio web\r\n    setfase(3);\r\n  };\r\n\r\n  // Esta función permite guardar las credenciales del usuario conforme vaya escribiendo\r\n  const guardarCredenciales = (e) => {\r\n    setcredenciales({\r\n      ...credenciales,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    console.log(credenciales);\r\n  };\r\n\r\n  // Return principal\r\n  return (\r\n    <form className=\"login\" onSubmit={enviarCredenciales}>\r\n      {error ? (\r\n        <div className=\"msjerror\">Todos los campos son obligatorios</div>\r\n      ) : null}\r\n      <input\r\n        type=\"text\"\r\n        name=\"username\"\r\n        placeholder=\"Usuario\"\r\n        value={username}\r\n        onChange={guardarCredenciales}\r\n        id=\"f1\"\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        placeholder=\"Contraseña\"\r\n        value={password}\r\n        onChange={guardarCredenciales}\r\n        id=\"f2\"\r\n      />\r\n      {camposVacios() ? null : <button>Enviar</button>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"../styles/Login.scss\";\r\n\r\nconst WebPage = ({ setwebsite, website }) => {\r\n  // Esta función permite guardar el website en su UseState\r\n  const guardarWebsite = (e) => {\r\n    setwebsite(e.target.value);\r\n  };\r\n\r\n  // Función para copiar lo que hay en el hash\r\n  // TODO: Hacer hash para las contraseñas\r\n  const copiarHash = () => {\r\n    var copyText = document.getElementById(\"hash\");\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n    document.execCommand(\"copy\");\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"website\"\r\n        value={website}\r\n        placeholder=\"Sitio ej. Google\"\r\n        onChange={guardarWebsite}\r\n      />\r\n      <input type=\"text\" id=\"hash\" value={website} readOnly />\r\n      <button onClick={copiarHash}>Copiar</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebPage;\r\n","import React from \"react\";\r\nimport \"../styles/Description.scss\";\r\n\r\nconst Description = () => {\r\n  return (\r\n    <div className=\"description\">\r\n      <h1>La única contraseña que necesitarás recordar.</h1>\r\n      <div className=\"underbar\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import React, { Fragment, useState } from \"react\";\nimport \"./styles/App.css\";\nimport \"./styles/Header.scss\";\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport Password from \"./components/Password\";\nimport Description from \"./components/Description\";\n\nfunction App() {\n  /* Usestate modificar la fase de interdaz: \n  -fase 1 (recién cargada la página y muestra el menú de inicio), \n  -fase 2 (se esconde el inicio y se muestra el login) o \n  -fase 3 (se muestra la contraseña)\n  */\n  const [fase, setfase] = useState(1);\n\n  // UseState para guardar las credenciales\n  const [credenciales, setcredenciales] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  // UseState para el website que genera el hash\n  const [website, setwebsite] = useState(\"\");\n\n  // Verificamos si el usuario está en fase 1, 2 o 3\n  let menuAMostrar;\n  if (fase === 1) {\n    menuAMostrar = <Description />;\n  } else if (fase === 2) {\n    menuAMostrar = (\n      <Login\n        setcredenciales={setcredenciales}\n        credenciales={credenciales}\n        setfase={setfase}\n      />\n    );\n  } else {\n    menuAMostrar = <Password setwebsite={setwebsite} website={website} />;\n  }\n\n  // Return del componente\n  return (\n    <Fragment setfase={setfase}>\n      <Header setfase={setfase} />\n      {menuAMostrar}\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}